*************************************************************************************
***************************** Iteration 1 *******************************************
*************************************************************************************
Alex:
For this iteration, I, Alexander, implemented the server side and intermediate host multi-threading.
In addition, I wrote the handler methods for the server to service client requests depending on
the opcode sent. Methods include reading local files and packing them into datagrams to send over
virtual tftp connection, receiving datagrams and writing to a buffer output stream, and handling
acknowledgement packet. I also integrated and tested file transfer for the 3 main modules, Client,
Intermediate Host, and Server. Lastly, implemented option to operate system in normal or test mode.

Dawei (David):
For iteration 1, I implemented the host side, and draw all UCM diagrams.
Improved host with an optimization in the multi-thread behavior, delay between each new request should be lower. And cleaned up the code by Implemented a Helper class.
- Implemented the host side
    Files: IntHostListener.java, IntHostManager.java, Helper.java
- Draw the UCM diagrams for Client, Server and Host
  Read every members' code and draw flow charts in order to create correct UCM diagram.
    Files: Host 1.jpg, Host 2.jpg, client read.jpg, client write.jpg, server read.jpg, server write.jpg
- Tested project in both Eclipse and blueJ, and fixed few minor bugs in client and server.

Yu-Kai:
-TFTP request packet class
-TFTP decoding/encoding packet helper class  implementing RFC 1350, 2347, 2348, 2349, 7440 for fure use
-General debugging via wireshark and program trace
-Overall Eclipse project setup in GitHub

Sever:
-Implemented the client side implementation
-Implemented the user-interface
-Implemented quiet-verbose mode
-Integrated the Professor's error handling (Assignment1-Server.java) into the Server the side RequestListener.java
(besides that, no other code was used from the Professor)
-Tested and debugged Project before submission
-Wrote DetailedSetup.txt
-Compiled and submitted all required documents and ensured accuracy of requirements

As a team we metup over the weekend to work on this Iteration, we got a good grasp of what was to be done and who was to work
specific sections. We all tested and debugged once we had a runnable version.

*************************************************************************************
***************************** Iteration 2 *******************************************
*************************************************************************************

Sever:
-Testing and debugging errors that occurred from the error simulator
-Writing code to fix errors
-Commenting parts of code
-Cleaning up the project code to minimize redundancy 
-Writing code to clean up user interface experience

Alex:
Implemented error packet creation and sending for error message
types 4 and 5 on server side. Made changes to server UI and added
functionality to shutdown at any point after start up.

Dawei (David):
-Implemented the error simulator which create error socket port or packet data based on different error types.
-Implemented an UI for the host side, prompt the user to choose between different error types, and at which packet number.
-Draw UCM diagram for error simulator.

Yu-Kai:
- Maintenance and bug fix for TftpPacketHelper package
- Implementation of several features required for iteration on the client side
- General debugging on client/server via packet capture and program trace
- Performance improvement via Java method hotspot analysis 

*************************************************************************************
***************************** Iteration 3 *******************************************
*************************************************************************************

Alex:
-Implemented error code 1 one both client and server side.
-Edited interface for client side when the specified file could not be found.
-Edited error message from server when specified file could not be found.

Sever:
-Implemented Error code 3 on client and server side
-Tested/debugged error code 3 on client and server side

Yu-Kai:
- Implemented Error code 2 on client and server side
- General debugging on client/server via packet capture and program trace

Dawei (David):
- Went through both client and server side codes and draw flow chart to analysis and verify error handling.
- Draw error types sequence diagrams in all 4 new cases.
- Tested all 4 new cases and verified diagrams matching observed behaviors.


*************************************************************************************
***************************** Iteration 4 *******************************************
*************************************************************************************

Dawei (David):
- Implemented the ErrorSimulator, including cases of Duplicate, Delayed, Lost.
- Reworked Iteration 2 cases (which code was rewrited to support 10+ new cases)
- Reworked UI (5 layers of options to support all added new cases combinations)
- Testing new cases added for Iteration 4 and reworked Iteration 2.

Yu-Kai:
- Implementation of re-try and re-transmit on client/server
- General debugging on client/server via packet capture and program trace

Sever:
-Testing the whole application for preparation of the project demo
-Debugging and fixing errors that were found from testing

Alex:
-Testing/debugging iteration 4 implementations
-Drawing timeing diagrams for iteration 4 error cases


*************************************************************************************
***************************** Iteration 5 *******************************************
*************************************************************************************
